import math

def m_a(P_1, P_2, P_3):
    return math.sqrt((P_1)**2 + (P_2)**2 + (P_3)**2)

def U(P_1, P_2, P_3):
    return [P_1/(m_a(P_1, P_2, P_3)), P_2/(m_a(P_1, P_2, P_3)), P_3/(m_a(P_1, P_2, P_3))]

def c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3):
    return U(Q_1 - P_1, Q_2 - P_2, Q_3 - P_3)

def d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3):
    return math.sqrt((c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[1])**2 + (c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[2])**2)

def W_1(O_1, O_2, O_3, x_1, y_1, z_1):
    return [O_1 - x_1, O_2 - y_1, O_3 - z_1, 1]

def W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3):
    return [O_1, O_2*(c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[2])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)) - O_3*(c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[1])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)), O_2 *(c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[1])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)) + O_3*(c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[2])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)), 1]

def W_3(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3):
    return [O_1*d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)  + O_3*(-1*c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[0]), O_2, O_1*(c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[0]) + O_3*d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3), 1]

def W_4(O_1, O_2, O_3, t):
    return [O_1*math.cos(t) - O_2*math.sin(t), O_1*math.sin(t) + O_2*math.cos(t), O_3, 1]

def W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3):
    return [O_1*d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)  + O_3*(c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[0]), O_2, -1*O_1*(c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[0]) + O_3*d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3), 1]

def W_6(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3):
    return [O_1, O_2*(c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[2])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)) + O_3*(c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[1])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)), -1*O_2 *(c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[1])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)) + O_3*(c_o(P_1, P_2, P_3, Q_1, Q_2, Q_3)[2])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)), 1]

def W_7(O_1, O_2, O_3, x_1, y_1, z_1):
    return [O_1 + x_1, O_2 + y_1, O_3 + z_1, 1]

def W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t):
    return W_4(W_3(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[0], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2])[0], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[0], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2])[1], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[0], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2])[2])[0], W_3(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[0], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2])[0], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[0], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2])[1], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[0], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2])[2])[1], W_3(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[0], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2])[0], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[0], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2])[1], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[0], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2])[2])[2], t)

def W_s(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t):
    return W_7(W_6(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[0], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2])[0], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[0], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2])[1], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[0], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2])[2])[0], W_6(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[0], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2])[0], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[0], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2])[1], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[0], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2])[2])[1], W_6(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[0], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2])[0], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[0], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2])[1], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[0], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2])[2])[2], P_1, P_2, P_3)

def V(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t, detail):
    triangles = []
    P = [str(P_1), str(P_2), str(P_3)]
    Q = [str(Q_1), str(Q_2), str(Q_3)]
    pts = []
    for i in range(detail):
        pt = W_s(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, float((t*i)/detail))
        pt = [str(i) for i in pt][:3]
        pts.append(pt)
    for i in range(len(pts) - 1):
        triangles.append([P, pts[i], pts[i + 1]])
        triangles.append([Q, pts[i], pts[i + 1]])
    triangles.append([P, pts[len(pts) - 1], pts[0]])
    triangles.append([Q, pts[len(pts) - 1], pts[0]])
    return triangles