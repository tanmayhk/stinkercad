def write(text_file):
    # Variables
    text_file.write("z_{c}=1\n")
    text_file.write("y_{f}=1\n")
    text_file.write("a = 0\n")
    text_file.write("(0, a) \n")
    text_file.write("C=\left(0,\ 0\\right)\n")

    # Projection function
    text_file.write("D(P_x, P_y, P_z) = (((P_x - C.x) * ((P_z - z_c)/z_c)) + C.x, ((P_y - C.y) * ((P_z - z_c)/z_c)) + C.y)\n")

    # Rotation functions
    text_file.write("R_x(x, y, z) = x\n")
    text_file.write("R_y(x, y, z) = ycos(a) - zsin(a)\n")
    text_file.write("R_z(x, y, z) = ysin(a) + zcos(a)\n")

    # Polygon and combined plotting function
    text_file.write("f(x) = polygon(x)\n")
    text_file.write("P(M_1, M_2, M_3, N_1, N_2, N_3, O_1, O_2, O_3) = f([D(R_x(M_1, M_2, M_3), R_y(M_1, M_2, M_3), R_z(M_1, M_2, M_3)), D(R_x(N_1, N_2, N_3), R_y(N_1, N_2, N_3), R_z(N_1, N_2, N_3)), D(R_x(O_1, O_2, O_3), R_y(O_1, O_2, O_3), R_z(O_1, O_2, O_3))])\n")

    # Extrusion functions
    text_file.write("X_1(M_1, M_2, M_3, N_1, N_2, N_3) = M_2*N_3 - M_3*N_2\n")
    text_file.write("X_2(M_1, M_2, M_3, N_1, N_2, N_3) = M_3*N_1 - M_1*N_3\n")
    text_file.write("X_3(M_1, M_2, M_3, N_1, N_2, N_3) = M_1*N_2 - M_2*N_1\n")

    text_file.write("e_x(M_1, M_2, M_3, N_1, N_2, N_3, O_1, O_2, O_3, d) = [P(M_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), M_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), M_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), N_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), N_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), N_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), O_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), O_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), O_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3)), P(N_1, N_2, N_3, M_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), M_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), M_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), N_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), N_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), N_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3)), P(M_1, M_2, M_3, N_1, N_2, N_3, M_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), M_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), M_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3)), P(O_1, O_2, O_3, N_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), N_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), N_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), O_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), O_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), O_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3)), P(N_1, N_2, N_3, O_1, O_2, O_3, N_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), N_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), N_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3)), P(M_1, M_2, M_3, O_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), O_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), O_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), M_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), M_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), M_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3)), P(O_1, O_2, O_3, M_1, M_2, M_3, O_1 + d*X_1(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), O_2 + d*X_2(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3), O_3 + d*X_3(O_1 - M_1, O_2 - M_2, O_3 - M_3, N_1 - M_1, N_2 - M_2, N_3 - M_3))]\n")

    # Revolution functions

    #   accessory functions
    text_file.write("F_p(P_{x}, P_{y}, P_{z})=D(R_{x}(P_{x}, P_{y}, P_{z}), R_{y}(P_{x}, P_{y}, P_{z}), R_{z}(P_{x}, P_{y}, P_{z}))\n")
    text_file.write("m_{ag}(P_1, P_2, P_3) = \sqrt{(P_1)^2 + (P_2)^2 + (P_3)^2}\n")
    text_file.write("U(P_1, P_2, P_3) = [P_1/(m_{ag}(P_1, P_2, P_3)), P_2/(m_{ag}(P_1, P_2, P_3)), P_3/(m_{ag}(P_1, P_2, P_3))]\n")
    text_file.write("c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3) = U(Q_1 - P_1, Q_2 - P_2, Q_3 - P_3)\n")
    text_file.write("d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3) = \sqrt{(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[2])^2 + (c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[3])^2}\n")

    #   7 4x4 matrices
    text_file.write("W_1(O_1, O_2, O_3, x_1, y_1, z_1) = [O_1 - x_1, O_2 - y_1, O_3 - z_1, 1]\n")
    text_file.write("W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3) = [O_1, O_2*(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[3])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)) - O_3*(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[2])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)), O_2 *(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[2])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)) + O_3*(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[3])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)), 1]\n")
    text_file.write("W_3(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3) = [O_1*d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)  + O_3*(-1*c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[1]), O_2, O_1*(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[1]) + O_3*d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3), 1]\n")
    text_file.write("W_4(O_1, O_2, O_3, t) = [O_1*cos(t) - O_2*sin(t), O_1*sin(t) + O_2*cos(t), O_3, 1]\n")
    text_file.write("W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3) = [O_1*d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)  + O_3*(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[1]), O_2, -1*O_1*(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[1]) + O_3*d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3), 1]\n")
    text_file.write("W_6(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3) = [O_1, O_2*(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[3])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)) + O_3*(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[2])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)), -1*O_2 *(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[2])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)) + O_3*(c_{ost}(P_1, P_2, P_3, Q_1, Q_2, Q_3)[3])/(d_U(P_1, P_2, P_3, Q_1, Q_2, Q_3)), 1]\n")
    text_file.write("W_7(O_1, O_2, O_3, x_1, y_1, z_1) = [O_1 + x_1, O_2 + y_1, O_3 + z_1, 1]\n")

    #   3D conjugation matrices (split into two parts)
    text_file.write("W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t) = W_4(W_3(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[3])[1], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[3])[2], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[3])[3])[1], W_3(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[3])[1], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[3])[2], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[3])[3])[2], W_3(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[3])[1], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[3])[2], W_2(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_1(O_1, O_2, O_3, P_1, P_2, P_3)[1], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[2], W_1(O_1, O_2, O_3, P_1, P_2, P_3)[3])[3])[3], t)\n")
    text_file.write("W_s(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t) = W_7(W_6(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[3])[1], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[3])[2], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[3])[3])[1], W_6(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[3])[1], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[3])[2], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[3])[3])[2], W_6(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[3])[1], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[3])[2], W_5(P_1, P_2, P_3, Q_1, Q_2, Q_3, W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[1], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[2], W_f(P_1, P_2, P_3, Q_1, Q_2, Q_3, O_1, O_2, O_3, t)[3])[3])[3], P_1, P_2, P_3)\n")

    #   projection of revolution and revolution solid faces
    text_file.write("S_{tfu}(P_{1},P_{2},P_{3},Q_{1},Q_{2},Q_{3},O_{1},O_{2},O_{3},t_{i},t)=F_p(W_{s}(P_{1},P_{2},P_{3},Q_{1},Q_{2},Q_{3},O_{1},O_{2},O_{3},\\frac{(t_{i}+1)*t}{6})[1],W_{s}(P_{1},P_{2},P_{3},Q_{1},Q_{2},Q_{3},O_{1},O_{2},O_{3},\\frac{(t_{i}+1)*t}{6})[2],W_{s}(P_{1},P_{2},P_{3},Q_{1},Q_{2},Q_{3},O_{1},O_{2},O_{3},\\frac{(t_{i}+1)*t}{6})[3])\n")
    text_file.write("w_P(P_{1},P_{2},P_{3},Q_{1},Q_{2},Q_{3},O_{1},O_{2},O_{3},t_{i},t)=f([F_p(P_{1}, P_{2}, P_{3}), S_{tfu}(P_{1},P_{2},P_{3},Q_{1},Q_{2},Q_{3},O_{1},O_{2},O_{3},t_{i},t), S_{tfu}(P_{1},P_{2},P_{3},Q_{1},Q_{2},Q_{3},O_{1},O_{2},O_{3},t_{i}+1,t)])\n")
    
    text_file.write("V(P_1,P_2,P_3,Q_1,Q_2,Q_3,O_1,O_2,O_3,t)=[w_P(P_1,P_2,P_3,Q_1,Q_2,Q_3,O_1,O_2,O_3,1,t),w_P(P_1,P_2,P_3,Q_1,Q_2,Q_3,O_1,O_2,O_3,2,t),w_P(P_1,P_2,P_3,Q_1,Q_2,Q_3,O_1,O_2,O_3,3,t),w_P(P_1,P_2,P_3,Q_1,Q_2,Q_3,O_1,O_2,O_3,4,t),w_P(P_1,P_2,P_3,Q_1,Q_2,Q_3,O_1,O_2,O_3,5,t),w_P(P_1,P_2,P_3,Q_1,Q_2,Q_3,O_1,O_2,O_3,6,t), w_P(Q_1,Q_2,Q_3,P_1,P_2,P_3,O_1,O_2,O_3,1,t),w_P(Q_1,Q_2,Q_3,P_1,P_2,P_3,O_1,O_2,O_3,2,t),w_P(Q_1,Q_2,Q_3,P_1,P_2,P_3,O_1,O_2,O_3,3,t),w_P(Q_1,Q_2,Q_3,P_1,P_2,P_3,O_1,O_2,O_3,4,t),w_P(Q_1,Q_2,Q_3,P_1,P_2,P_3,O_1,O_2,O_3,5,t),w_P(Q_1,Q_2,Q_3,P_1,P_2,P_3,O_1,O_2,O_3,6,t)]\n")